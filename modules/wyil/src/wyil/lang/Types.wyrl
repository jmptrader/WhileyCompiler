// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package wyil.lang

// ====================================================================
// Overview
// ====================================================================
//
// Defines a language of types similar to that found in this paper:
//
// * "Sound and Complete Flow Typing with Unions, Intersections and
//    Negations", David J. Pearce, In Proceedings of VMCAI, 2013.

// ====================================================================
// Not
// ====================================================================

term NotT(Type)

reduce NotT(AnyT):
    => VoidT

reduce NotT(VoidT):
    => AnyT

reduce NotT(NotT(Type t)):
    => t

reduce NotT(OrT{Type... es}):
    => let ns = { NotT(e) | e in es }
       in AndT(ns)

reduce NotT(AndT{Type... es}):
    => let ns = { NotT(e) | e in es }
       in OrT(ns)

// ====================================================================
// And
// ====================================================================

term AndT{Type...}

reduce AndT{}:
    => VoidT

reduce AndT{Type t}:
    => t

reduce AndT{AndT{Type... xs}, Type... ys}:
    => AndT (xs ++ ys)

reduce AndT{OrT{Type... xs}, Type... ys}:
    => let zs = { AndT(x ++ ys) | x in xs }
       in OrT (zs)

// ====================================================================
// Or
// ====================================================================

term OrT{Type...}

reduce OrT{}:
    => VoidT

reduce OrT{Type t}:
    => t

reduce OrT{OrT{Type... xs}, Type... ys}:
    => OrT (xs ++ ys)

// ====================================================================
// Record
// ====================================================================
term RecordT{[string,Type]...}

reduce RecordT{[string,VoidT], [string,Type]... ts}:
    => VoidT

// reduce AndT{TupleT[Type... t1s], TupleT[Type... t2s], Type... ts}:
//     => VoidT, if |t1s| != |t2s|
//     => let r = [ AndT{t1s[i],t2s[i]} | i in 0..|t1s| ]
//        in AndT(TupleT(r) ++ ts)

// reduce AndT{TupleT[Type... t1s] t1, NotT(TupleT[Type... t2s]), Type... ts}:
//     => AndT(t1 ++ ts), if |t1s| != |t2s|
//     => VoidT, if |t1s| == 0
//     => let r = [ AndT{t1s[i],NotT(t2s[i])} | i in 0..|t1s| ]
//        in AndT(TupleT(r) ++ ts)

// reduce AndT{TupleT[Type...] t1, NotT(ArrayT(Type)), Type... ts}:
//     => AndT({t1} ++ ts)

// TODO: pull disjuncts out of records?

// ====================================================================
// Array
// ====================================================================
term ArrayT(Type)

reduce ArrayT(VoidT):
    => VoidT

reduce AndT{ArrayT(Type t1), ArrayT(Type t2), Type... ts}:
    => AndT(ArrayT(AndT{t1,t2})++ts)

reduce AndT{ArrayT(Type t1), NotT(ArrayT(Type t2)), Type... ts}:
    => AndT(ArrayT(AndT{t1,NotT(t2)})++ts)

reduce AndT{ArrayT(Type) t1, NotT(RecordT{[string,Type]...}), Type... ts}:
    => AndT({t1} ++ ts)

reduce AndT{ArrayT(Type) s, Proton p, Type... ts}
requires !(p is AnyT):
    => VoidT

reduce OrT{ArrayT(Type t1) s1, ArrayT(Type t2) s2, Type... ts}
requires t1 == t2:
    => OrT({s1}++ts)

// ====================================================================
// Atoms
// ====================================================================

term AnyT
term VoidT
term NullT
term BoolT
term IntT
term NominalT(string)

define Quark as AnyT | NullT | VoidT | BoolT | IntT | NominalT(string)
define Proton as Quark | RecordT{[string,Proton]...} | ArrayT(Proton)
define Atom as Proton | NotT(Proton)

reduce AndT{VoidT, Type... xs}:
    => VoidT

reduce AndT{AnyT, Type... xs}:
    => AndT(xs)

// a1 needs to be a quark here, as the rule for tuples is handled
// above.
reduce AndT{Quark a1, Proton a2, Type... ts}
requires a1 != a2 && a1 != AnyT && a2 != AnyT:
    => VoidT

// a1 needs to be a quark here, as the rule for tuples is handled
// above.
reduce AndT{Quark a1, NotT(Proton a2), Type... ts}
requires a1 == a2:
    => VoidT

reduce AndT{Quark a1, NotT(Proton a2), Type... ts}
requires a1 != a2 && a2 != AnyT:
    => AndT (a1 ++ ts)

reduce OrT{AnyT, Type... xs}:
    => AnyT

reduce OrT{VoidT, Type... xs}:
    => OrT(xs)

// ====================================================================
// Function
// ====================================================================
term FunctionT[Type,Type, Type...]

// ====================================================================
// General Type
// ====================================================================

define Type as Atom | NotT | OrT | AndT | ArrayT | RecordT | FunctionT

